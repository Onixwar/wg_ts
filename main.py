import asyncio
import logging
import json
import string
import subprocess
import sqlite3
import time
import html
import os
import telebot
import aiosqlite
import buttons
import dbworker
import emoji as e
import asyncio
import threading
import shutil
import qrcode
import logging

from config import secret_key, account_id, bot_token, one_month_cost, admin_tg_id, trial_period, count_free_from_referrer, UTC_time, tg_token, tg_shop_token
from io import BytesIO
from payment import create, check
from datetime import datetime
from telebot import TeleBot
from telebot import asyncio_filters
from telebot import types
from telebot.async_telebot import AsyncTeleBot
from telebot.asyncio_storage import StateMemoryStorage
from telebot.asyncio_handler_backends import State, StatesGroup
from buttons import main_buttons
from dbworker import User, payment_already_checked
from telebot.asyncio_filters import StateFilter

with open("config.json", encoding="utf-8") as file_handler:
    CONFIG = json.load(file_handler)
    dbworker.CONFIG = CONFIG
    buttons.CONFIG = CONFIG

with open("texts.json", encoding="utf-8") as file_handler:
    text_mess = json.load(file_handler)
    texts_for_bot = text_mess

DATABASE_NAME = "data.sqlite"
BOTAPIKEY = CONFIG["tg_token"]

bot = AsyncTeleBot(CONFIG["tg_token"], state_storage=StateMemoryStorage())


async def initialize_database():
    async with aiosqlite.connect(DATABASE_NAME) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS userss (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username STRING DEFAULT '',
                full_name TEXT DEFAULT '',
                fullname STRING DEFAULT '',
                tgid INTEGER UNIQUE ON CONFLICT IGNORE,
                registered INTEGER DEFAULT 0,
                trial_expiry INTEGER DEFAULT 0,
                subscription INTEGER DEFAULT 0,
                referrer_id INTEGER DEFAULT NULL,
                referrals INTEGER DEFAULT 0,
                bonus_awarded INTEGER DEFAULT 0,
                referral_paid BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                banned BOOLEAN DEFAULT FALSE,
                notion_oneday BOOLEAN DEFAULT FALSE,
                notified_about_expiry INTEGER DEFAULT 0,
                trial_continue BOOLEAN DEFAULT FALSE,
                traffic_sent INTEGER DEFAULT 0,
                traffic_received INTEGER DEFAULT 0,
                referral_bonus_awarded BOOLEAN DEFAULT FALSE,
                public_key TEXT DEFAULT '',
                allowed BOOLEAN DEFAULT 1,
                wg_ipv4 TEXT DEFAULT '',
                wg_ipv6 TEXT DEFAULT '',
                wg_priv_key TEXT DEFAULT '',
                wg_pub_key TEXT DEFAULT '',
                wg_preshared_key TEXT DEFAULT '',
                FOREIGN KEY (referrer_id) REFERENCES userss(id)
            );
        ''')

        await db.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tgid INTEGER NOT NULL,
                bill_id TEXT NOT NULL,
                amount REAL NOT NULL,
                time_to_add INTEGER NOT NULL,
                mesid TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ''')

        await db.execute('''
            CREATE TABLE IF NOT EXISTS user_activity (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tgid INTEGER,
                last_access TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                usage_count INTEGER DEFAULT 0,
                FOREIGN KEY (tgid) REFERENCES userss(tgid)
            );
        ''')

        await db.execute('''
            CREATE TABLE IF NOT EXISTS static_profiles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name STRING,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ''')
        await db.commit()

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    await initialize_database()
    await bot.polling(non_stop=True, interval=0, request_timeout=60)


class MyStates(StatesGroup):
    findUserViaId = State()
    editUser = State()
    editUserResetTime = State()
    UserAddTimeDays = State()
    UserAddTimeHours = State()
    UserAddTimeMinutes = State()
    UserAddTimeApprove = State()
    AdminNewUser = State()
    UserRemoveTimeDays = State()  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    UserRemoveTimeHours = State()
    UserRemoveTimeMinutes = State()
    UserRemoveTimeApprove = State()
    SendMessageToAll = State()
    ConfirmSendMessageToAll = State()


@bot.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type != "private":
        return

    await bot.delete_state(message.from_user.id)

    user_dat = await User.GetInfo(message.chat.id)
    if not user_dat:
        user_dat = User()
        user_dat.tgid = message.chat.id

    if user_dat.registered:
        await bot.send_message(
            message.chat.id,
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ",
            parse_mode="HTML",
            reply_markup=await main_buttons(user_dat)
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = "@" + str(message.from_user.username) if message.from_user.username else "@–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" 
    arg_referrer_id = message.text[7:] if len(message.text) > 7 else None
    referrer_id = arg_referrer_id if arg_referrer_id and arg_referrer_id.isdigit() else None

    await user_dat.Adduser(username, message.from_user.full_name, referrer_id)

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    user_dat = await User.GetInfo(message.chat.id)

    if user_dat and user_dat.registered:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            message.chat.id,
            e.emojize(texts_for_bot["hello_message"]),
            parse_mode="HTML",
            reply_markup=await main_buttons(user_dat)
        )
        await bot.send_message(
            message.chat.id,
            e.emojize(texts_for_bot["trial_message"])
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        channel_keyboard = types.InlineKeyboardMarkup()
        channel_keyboard.add(
            types.InlineKeyboardButton(
                e.emojize("üîî –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª"), url="https://t.me/StudyVpn"
            )
        )

        await bot.send_message(
            message.chat.id,
            "–ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª!",
            reply_markup=channel_keyboard
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN
        try:
            config_path = f'/root/wg0-client-{user_dat.tgid}.conf'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not os.path.exists(config_path):
                await bot.send_message(
                    message.chat.id,
                    "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É—é –µ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å..."
                )
                result = subprocess.call(f'./addusertovpn.sh {user_dat.tgid}', shell=True)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
                if not os.path.exists(config_path):
                    await bot.send_message(
                        message.chat.id,
                        "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
                    return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            with open(config_path, 'rb') as config:
                await bot.send_document(
                    chat_id=message.chat.id,
                    document=config,
                    caption="–í–∞—à —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN.",
                    visible_file_name=f"{user_dat.tgid}.conf"
                )


        except FileNotFoundError:
            await bot.send_message(
                chat_id=message.chat.id,
                text="–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

@bot.message_handler(state=MyStates.editUser, content_types=["text"])
async def Work_with_Message(m: types.Message):
    async with bot.retrieve_data(m.from_user.id) as data:
        tgid = data['usertgid']
    user_dat = await User.GetInfo(tgid)
    if e.demojize(m.text) == "–ù–∞–∑–∞–¥ :right_arrow_curving_left:":
        await bot.reset_data(m.from_user.id)
        await bot.delete_state(m.from_user.id)
        await bot.send_message(m.from_user.id, "–í–µ—Ä–Ω—É–ª –≤–∞—Å –Ω–∞–∑–∞–¥!", reply_markup=await buttons.admin_buttons())
        return
    if e.demojize(m.text) == "–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è":
        await bot.set_state(m.from_user.id, MyStates.UserAddTimeDays)
        Butt_skip = types.ReplyKeyboardMarkup(resize_keyboard=True)
        Butt_skip.add(types.KeyboardButton(e.emojize(f"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å :next_track_button:")))
        await bot.send_message(m.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:", reply_markup=Butt_skip)
        return
    if e.demojize(m.text) == "–û–±–Ω—É–ª–∏—Ç—å –≤—Ä–µ–º—è":
        await bot.set_state(m.from_user.id, MyStates.editUserResetTime)
        Butt_skip = types.ReplyKeyboardMarkup(resize_keyboard=True)
        Butt_skip.add(types.KeyboardButton(e.emojize(f"–î–∞")))
        Butt_skip.add(types.KeyboardButton(e.emojize(f"–ù–µ—Ç")))
        await bot.send_message(m.from_user.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ?",
                               reply_markup=Butt_skip)
        return
    if e.demojize(m.text) == "–£–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è":
        await bot.set_state(m.from_user.id, MyStates.UserRemoveTimeDays)
        Butt_skip = types.ReplyKeyboardMarkup(resize_keyboard=True)
        Butt_skip.add(types.KeyboardButton(e.emojize(f"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å :next_track_button:")))
        await bot.send_message(m.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å:", reply_markup=Butt_skip)
        return


@bot.message_handler(state=MyStates.editUserResetTime, content_types=["text"])
async def Work_with_Message(m: types.Message):
    async with bot.retrieve_data(m.from_user.id) as data:
        tgid = data['usertgid']

    if e.demojize(m.text) == "–î–∞":
        db = await aiosqlite.connect(DATABASE_NAME)
        db.row_factory = sqlite3.Row
        await db.execute(f"Update userss set subscription = ?, banned=false, notion_oneday=true where tgid=?",
                         (str(int(time.time())), tgid))
        await db.commit()
        await bot.send_message(m.from_user.id, "–í—Ä–µ–º—è —Å–±—Ä–æ—à–µ–Ω–æ!")

    async with bot.retrieve_data(m.from_user.id) as data:
        usertgid = data['usertgid']
    user_dat = await User.GetInfo(usertgid)
    readymes = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{str(user_dat.fullname)}</b> ({str(user_dat.username)})\nTG-id: <code>{str(user_dat.tgid)}</code>\n\n"

    if int(user_dat.subscription) > int(time.time()):
        readymes += f"–ü–æ–¥–ø–∏—Å–∫–∞: –¥–æ <b>{datetime.utcfromtimestamp(int(user_dat.subscription) + CONFIG['UTC_time'] * 3600).strftime('%d.%m.%Y %H:%M')}</b> :check_mark_button:"
    else:
        readymes += f"–ü–æ–¥–ø–∏—Å–∫–∞: –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å <b>{datetime.utcfromtimestamp(int(user_dat.subscription) + CONFIG['UTC_time'] * 3600).strftime('%d.%m.%Y %H:%M')}</b> :cross_mark:"
    await bot.set_state(m.from_user.id, MyStates.editUser)

    await bot.send_message(m.from_user.id, e.emojize(readymes),
                           reply_markup=await buttons.admin_buttons_edit_user(user_dat), parse_mode="HTML")


@bot.message_handler(state=MyStates.UserAddTimeDays, content_types=["text"])
async def Work_with_Message(m: types.Message):
    if e.demojize(m.text) == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å :next_track_button:":
        days = 0
    else:
        try:
            days = int(m.text)
        except:
            await bot.send_message(m.from_user.id, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        if days < 0:
            await bot.send_message(m.from_user.id, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

    async with bot.retrieve_data(m.from_user.id) as data:
        data['days'] = days
    await bot.set_state(m.from_user.id, MyStates.UserAddTimeHours)
    Butt_skip = types.ReplyKeyboardMarkup(resize_keyboard=True)
    Butt_skip.add(types.KeyboardButton(e.emojize(f"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å :next_track_button:")))
    await bot.send_message(m.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:", reply_markup=Butt_skip)


@bot.message_handler(state=MyStates.UserAddTimeHours, content_types=["text"])
async def Work_with_Message(m: types.Message):
    if e.demojize(m.text) == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å :next_track_button:":
        hours = 0
    else:
        try:
            hours = int(m.text)
        except:
            await bot.send_message(m.from_user.id, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        if hours < 0:
            await bot.send_message(m.from_user.id, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

    async with bot.retrieve_data(m.from_user.id) as data:
        data['hours'] = hours
    await bot.set_state(m.from_user.id, MyStates.UserAddTimeMinutes)
    Butt_skip = types.ReplyKeyboardMarkup(resize_keyboard=True)
    Butt_skip.add(types.KeyboardButton(e.emojize(f"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å :next_track_button:")))
    await bot.send_message(m.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:", reply_markup=Butt_skip)


@bot.message_handler(state=MyStates.UserAddTimeMinutes, content_types=["text"])
async def Work_with_Message(m: types.Message):
    if e.demojize(m.text) == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å :next_track_button:":
        minutes = 0
    else:
        try:
            minutes = int(m.text)
        except:
            await bot.send_message(m.from_user.id, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        if minutes < 0:
            await bot.send_message(m.from_user.id, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

    async with bot.retrieve_data(m.from_user.id) as data:
        data['minutes'] = minutes
        hours = data['hours']
        days = data['days']
        tgid = data['usertgid']

    await bot.set_state(m.from_user.id, MyStates.UserAddTimeApprove)
    Butt_skip = types.ReplyKeyboardMarkup(resize_keyboard=True)
    Butt_skip.add(types.KeyboardButton(e.emojize(f"–î–∞")))
    Butt_skip.add(types.KeyboardButton(e.emojize(f"–ù–µ—Ç")))
    await bot.send_message(m.from_user.id,
                           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {str(tgid)} –¥–æ–±–∞–≤–∏—Ç—Å—è:\n\n–î–Ω–∏: {str(days)}\n–ß–∞—Å—ã: {str(hours)}\n–ú–∏–Ω—É—Ç—ã: {str(minutes)}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ ?",
                           reply_markup=Butt_skip)


@bot.message_handler(state=MyStates.UserAddTimeApprove, content_types=["text"])
async def Work_with_Message(m: types.Message):
    all_time = 0
    if e.demojize(m.text) == "–î–∞":
        async with bot.retrieve_data(m.from_user.id) as data:
            minutes = data['minutes']
            hours = data['hours']
            days = data['days']
            tgid = data['usertgid']
        all_time += minutes * 60
        all_time += hours * 60 * 60
        all_time += days * 60 * 60 * 24
        await AddTimeToUser(tgid, all_time)
        await bot.send_message(m.from_user.id, e.emojize("–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!"), parse_mode="HTML")

    async with bot.retrieve_data(m.from_user.id) as data:
        usertgid = data['usertgid']
    user_dat = await User.GetInfo(usertgid)
    readymes = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{str(user_dat.fullname)}</b> ({str(user_dat.username)})\nTG-id: <code>{str(user_dat.tgid)}</code>\n\n"

    if int(user_dat.subscription) > int(time.time()):
        readymes += f"–ü–æ–¥–ø–∏—Å–∫–∞: –¥–æ <b>{datetime.utcfromtimestamp(int(user_dat.subscription) + CONFIG['UTC_time'] * 3600).strftime('%d.%m.%Y %H:%M')}</b> :check_mark_button:"
    else:
        readymes += f"–ü–æ–¥–ø–∏—Å–∫–∞: –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å <b>{datetime.utcfromtimestamp(int(user_dat.subscription) + CONFIG['UTC_time'] * 3600).strftime('%d.%m.%Y %H:%M')}</b> :cross_mark:"
    await bot.set_state(m.from_user.id, MyStates.editUser)

    await bot.send_message(m.from_user.id, e.emojize(readymes),
                           reply_markup=await buttons.admin_buttons_edit_user(user_dat), parse_mode="HTML")


@bot.message_handler(state=MyStates.findUserViaId, content_types=["text"])
async def Work_with_Message(m: types.Message):
    await bot.delete_state(m.from_user.id)
    try:
        user_id = int(m.text)
    except:
        await bot.send_message(m.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π Id!", reply_markup=await buttons.admin_buttons())
        return
    user_dat = await User.GetInfo(user_id)
    if not user_dat.registered:
        await bot.send_message(m.from_user.id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                               reply_markup=await buttons.admin_buttons())
        return

    readymes = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{str(user_dat.fullname)}</b> ({str(user_dat.username)})\nTG-id: <code>{str(user_dat.tgid)}</code>\n\n"
    if int(user_dat.subscription) > int(time.time()):
        readymes += f"–ü–æ–¥–ø–∏—Å–∫–∞: –¥–æ <b>{datetime.utcfromtimestamp(int(user_dat.subscription) + CONFIG['UTC_time'] * 3600).strftime('%d.%m.%Y %H:%M')}</b> :check_mark_button:"
    else:
        readymes += f"–ü–æ–¥–ø–∏—Å–∫–∞: –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å <b>{datetime.utcfromtimestamp(int(user_dat.subscription) + CONFIG['UTC_time'] * 3600).strftime('%d.%m.%Y %H:%M')}</b> :cross_mark:"
    await bot.set_state(m.from_user.id, MyStates.editUser)
    async with bot.retrieve_data(m.from_user.id) as data:
        data['usertgid'] = user_dat.tgid
    await bot.send_message(m.from_user.id, e.emojize(readymes),
                           reply_markup=await buttons.admin_buttons_edit_user(user_dat), parse_mode="HTML")


@bot.message_handler(state=MyStates.AdminNewUser, content_types=["text"])
async def Work_with_Message(m: types.Message):
    if e.demojize(m.text) == "–ù–∞–∑–∞–¥ :right_arrow_curving_left:":
        await bot.delete_state(m.from_user.id)
        await bot.send_message(m.from_user.id, "–í–µ—Ä–Ω—É–ª –≤–∞—Å –Ω–∞–∑–∞–¥!", reply_markup=await buttons.admin_buttons())
        return

    if set(m.text) <= set(string.ascii_letters + string.digits):
        db = await aiosqlite.connect(DATABASE_NAME)
        await db.execute(f"INSERT INTO static_profiles (name) values (?)", (m.text,))
        await db.commit()
        check = subprocess.call(f'./addusertovpn.sh {str(m.text)}', shell=True)
        await bot.delete_state(m.from_user.id)
        await bot.send_message(m.from_user.id,
                               "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=await buttons.admin_buttons_static_users())
    else:
        await bot.send_message(m.from_user.id,
                               "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –∞—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return


@bot.message_handler(state=MyStates.UserRemoveTimeDays, content_types=["text"])
async def Remove_Time_Days(m: types.Message):
    if e.demojize(m.text) == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å :next_track_button:":
        days = 0
    else:
        try:
            days = int(m.text)
        except:
            await bot.send_message(m.from_user.id, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        if days < 0:
            await bot.send_message(m.from_user.id, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

    async with bot.retrieve_data(m.from_user.id) as data:
        data['days'] = days
    await bot.set_state(m.from_user.id, MyStates.UserRemoveTimeHours)
    Butt_skip = types.ReplyKeyboardMarkup(resize_keyboard=True)
    Butt_skip.add(types.KeyboardButton(e.emojize(f"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å :next_track_button:")))
    await bot.send_message(m.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å:", reply_markup=Butt_skip)


@bot.message_handler(state=MyStates.UserRemoveTimeHours, content_types=["text"])
async def Remove_Time_Hours(m: types.Message):
    if e.demojize(m.text) == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å :next_track_button:":
        hours = 0
    else:
        try:
            hours = int(m.text)
        except:
            await bot.send_message(m.from_user.id, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        if hours < 0:
            await bot.send_message(m.from_user.id, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

    async with bot.retrieve_data(m.from_user.id) as data:
        data['hours'] = hours
    await bot.set_state(m.from_user.id, MyStates.UserRemoveTimeMinutes)
    Butt_skip = types.ReplyKeyboardMarkup(resize_keyboard=True)
    Butt_skip.add(types.KeyboardButton(e.emojize(f"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å :next_track_button:")))
    await bot.send_message(m.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å:", reply_markup=Butt_skip)


@bot.message_handler(state=MyStates.UserRemoveTimeMinutes, content_types=["text"])
async def Remove_Time_Minutes(m: types.Message):
    if e.demojize(m.text) == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å :next_track_button:":
        minutes = 0
    else:
        try:
            minutes = int(m.text)
        except:
            await bot.send_message(m.from_user.id, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        if minutes < 0:
            await bot.send_message(m.from_user.id, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

    async with bot.retrieve_data(m.from_user.id) as data:
        data['minutes'] = minutes
        hours = data['hours']
        days = data['days']
        tgid = data['usertgid']

    await bot.set_state(m.from_user.id, MyStates.UserRemoveTimeApprove)
    Butt_skip = types.ReplyKeyboardMarkup(resize_keyboard=True)
    Butt_skip.add(types.KeyboardButton(e.emojize(f"–î–∞")))
    Butt_skip.add(types.KeyboardButton(e.emojize(f"–ù–µ—Ç")))
    await bot.send_message(m.from_user.id,
                           f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {str(tgid)} –±—É–¥–µ—Ç —É–±—Ä–∞–Ω–æ:\n\n–î–Ω–∏: {str(days)}\n–ß–∞—Å—ã: {str(hours)}\n–ú–∏–Ω—É—Ç—ã: {str(minutes)}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
                           reply_markup=Butt_skip)


@bot.message_handler(state=MyStates.UserRemoveTimeApprove, content_types=["text"])
async def Remove_Time_Approve(m: types.Message):
    if e.demojize(m.text) == "–î–∞":
        async with bot.retrieve_data(m.from_user.id) as data:
            minutes = data['minutes']
            hours = data['hours']
            days = data['days']
            tgid = data['usertgid']

        all_time = (minutes * 60) + (hours * 3600) + (days * 86400)
        current_time = int(time.time())

        # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        user_dat = await User.GetInfo(tgid)
        new_subscription = max(current_time, user_dat.subscription - all_time)

        db = await aiosqlite.connect(DATABASE_NAME)
        await db.execute("UPDATE userss SET subscription = ? WHERE tgid = ?", (new_subscription, tgid))
        await db.commit()
        await db.close()

        await bot.send_message(m.from_user.id, e.emojize("–í—Ä–µ–º—è —É–º–µ–Ω—å—à–µ–Ω–æ!"), parse_mode="HTML")
    else:
        await bot.send_message(m.from_user.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode="HTML")

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await bot.set_state(m.from_user.id, MyStates.editUser)
    user_dat = await User.GetInfo(tgid)
    await bot.send_message(m.from_user.id, e.emojize(f"–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_dat.username}."),
                           reply_markup=await buttons.admin_buttons_edit_user(user_dat))






@bot.message_handler(commands=["send_to_all"])
async def send_to_all_start(message: types.Message):
    if message.chat.id != CONFIG["admin_tg_id"]:
        await bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await bot.set_state(message.chat.id, MyStates.SendMessageToAll)
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")

@bot.message_handler(state=MyStates.SendMessageToAll, content_types=["text"])
async def send_to_all_process(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = message.text

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"))
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))

    await bot.set_state(message.chat.id, MyStates.ConfirmSendMessageToAll)
    async with bot.retrieve_data(message.chat.id) as data:
        data["message_to_send"] = text

    await bot.send_message(message.chat.id, f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{text}", reply_markup=markup)

@bot.message_handler(state=MyStates.ConfirmSendMessageToAll, content_types=["text"])
async def confirm_send_to_all(message: types.Message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await bot.reset_data(message.chat.id)
        await bot.delete_state(message.chat.id)
        await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        async with bot.retrieve_data(message.chat.id) as data:
            text = data["message_to_send"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        db = sqlite3.connect(DATABASE_NAME)
        db.row_factory = sqlite3.Row
        c = db.execute("SELECT tgid FROM userss WHERE subscription > strftime('%s', 'now')")
        users = c.fetchall()
        c.close()
        db.close()

        for user in users:
            try:
                await bot.send_message(user["tgid"], text, parse_mode="HTML")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['tgid']}: {e}")

        await bot.reset_data(message.chat.id)
        await bot.delete_state(message.chat.id)
        await bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")



@bot.message_handler(commands=["send_subscription_reminders"])
async def send_subscription_reminders(message: types.Message):
    if message.chat.id != CONFIG["admin_tg_id"]:
        await bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    db = sqlite3.connect(DATABASE_NAME)
    db.row_factory = sqlite3.Row
    c = db.execute("SELECT tgid, subscription FROM userss WHERE subscription > strftime('%s', 'now')")
    users = c.fetchall()
    c.close()
    db.close()

    for user in users:
        time_now = int(time.time())
        remaining_days = (int(user["subscription"]) - time_now) // 86400

        if remaining_days < 3:
            message_text = "‚è∞ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 3 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ—Å–ø–µ—à–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ!"
        elif remaining_days <= 7:
            message_text = "üéâ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ —Å—Ç–æ–∏—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏!"
        elif remaining_days <= 14:
            message_text = "üëç –£ –≤–∞—Å –µ—â–µ 14 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, –Ω–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤!"

        try:
            await bot.send_message(user["tgid"], message_text, parse_mode="HTML")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['tgid']}: {e}")

    await bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")


@bot.message_handler(func=lambda message: e.demojize(message.text) == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º :envelope:")
async def handle_send_to_all_button(message: types.Message):
    if message.chat.id != CONFIG["admin_tg_id"]:
        await bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await send_to_all_start(message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏


@bot.message_handler(func=lambda message: e.demojize(message.text) == "–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–µ :alarm_clock:")
async def handle_subscription_reminders_button(message: types.Message):
    if message.chat.id != CONFIG["admin_tg_id"]:
        await bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await send_subscription_reminders(message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π


@bot.message_handler(commands=["admin"])
async def admin_panel(message: types.Message):
    if message.chat.id != CONFIG["admin_tg_id"]:
        await bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await bot.send_message(
        message.chat.id,
        "–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
        reply_markup=await admin_buttons()
    )





@bot.message_handler(func=lambda message: message.text == e.emojize("–ü–æ–º–æ—â—å ‚ùì"))
async def help_handler(message: types.Message):
    support_username = "StudyVpnRu"
    support_link = f"tg://resolve?domain={support_username}"

    markup = types.InlineKeyboardMarkup()
    button_yes = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–µ?", url=support_link)
    button_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_help")
    markup.add(button_yes, button_no)

    await bot.send_message(
        message.chat.id,
        "–•–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?",
        reply_markup=markup,
        disable_web_page_preview=True
    )

@bot.callback_query_handler(func=lambda call: call.data == "cancel_help")
async def cancel_help(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await bot.delete_message(call.message.chat.id, call.message.message_id)



@bot.message_handler(state="*", content_types=["text"])
async def Work_with_Message(m: types.Message):
    user_dat = await User.GetInfo(m.chat.id)

    if user_dat.registered == False:
        try:
            username = "@" + str(m.from_user.username)
        except:

            username = str(m.from_user.id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º referrer_id
        arg_referrer_id = m.text[7:]
        referrer_id = arg_referrer_id if arg_referrer_id != user_dat.tgid else 0

        await user_dat.Adduser(username, m.from_user.full_name, referrer_id)
        await bot.send_message(m.chat.id,
                               texts_for_bot["hello_message"],
                               parse_mode="HTML", reply_markup=await main_buttons(user_dat,wasUpdate=True))
        return
    await user_dat.CheckNewNickname(m)

    if m.from_user.id == CONFIG["admin_tg_id"]:
        if e.demojize(m.text) == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å :smiling_face_with_sunglasses:":
            await bot.send_message(m.from_user.id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=await buttons.admin_buttons())
            return
        if e.demojize(m.text) == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :right_arrow_curving_left:":
            await bot.send_message(m.from_user.id, e.emojize("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å :smiling_face_with_sunglasses:"),
                                   reply_markup=await main_buttons(user_dat,wasUpdate=True))
            return
        if e.demojize(m.text) == "–í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π :bust_in_silhouette:":
            await bot.send_message(m.from_user.id, e.emojize("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏."),
                                   reply_markup=await buttons.admin_buttons_output_users())
            return

        if e.demojize(m.text) == "–ù–∞–∑–∞–¥ :right_arrow_curving_left:":
            await bot.send_message(m.from_user.id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=await buttons.admin_buttons())
            return

        if m.from_user.id == CONFIG["admin_tg_id"]:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã statistics –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if e.demojize(m.text) == "statistics :bar_chart:":
                await show_stats(m)
                return

        if e.demojize(m.text) == "–í—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
            allusers = await user_dat.GetAllUsers()
            readymass = []
            readymes = ""
            for i in allusers:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø–∏—Å–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                fullname = i["fullname"] if i["fullname"] is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                username = i["username"] if i["username"] is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                tgid = i["tgid"] if i["tgid"] is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                subscription_time = int(i["subscription"]) if i["subscription"] is not None else 0

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
                formatted_date = datetime.utcfromtimestamp(subscription_time + CONFIG['UTC_time'] * 3600).strftime(
                    '%d.%m.%Y %H:%M')

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
                raw = f"{fullname} ({username}|<code>{tgid}</code>)"
                date_info = f" - {formatted_date}\n\n" if subscription_time > int(time.time()) else "\n\n"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
                if len(readymes) + len(raw + date_info) > 4090:
                    readymass.append(readymes)
                    readymes = ""
                readymes += raw + date_info

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            readymass.append(readymes)
            for msg in readymass:
                await bot.send_message(m.from_user.id, e.emojize(msg), parse_mode="HTML")
            return

        # –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –≤ –±–∞–Ω–µ –∫–∞–∫ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        if e.demojize(m.text) == "–ü—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥":
            db = sqlite3.connect(DATABASE_NAME)
            db.row_factory = sqlite3.Row
            c = db.execute("SELECT * FROM userss WHERE banned=true AND username <> '@None'")
            log = c.fetchall()
            c.close()
            db.close()

            BotChecking = TeleBot(BOTAPIKEY)
            timetoadd = 7 * 60 * 60 * 24
            countAdded = 0
            countBlocked = 0

            db = sqlite3.connect(DATABASE_NAME)
            for i in log:
                try:
                    countAdded += 1
                    db.execute("UPDATE userss SET subscription = ?, banned=false, notion_oneday=false WHERE tgid=?",
                               (str(int(time.time()) + timetoadd), i["tgid"]))
                    db.commit()

                    subprocess.call(f'./addusertovpn.sh {str(i["tgid"])}', shell=True)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    Butt_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    Butt_main.add(types.KeyboardButton(e.emojize("–ü—Ä–æ–¥–ª–∏—Ç—å :money_bag:")),
                                  types.KeyboardButton(e.emojize("–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å :gear:")))
                    BotChecking.send_message(i['tgid'], texts_for_bot["alert_to_extend_sub"], reply_markup=Butt_main)

                except Exception as ex:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex}")
                    countAdded -= 1
                    countBlocked += 1
                    continue

            db.close()

            BotChecking.send_message(CONFIG['admin_tg_id'],
                                     f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ {countAdded} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. {countBlocked} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–æ –±–æ—Ç–∞",
                                     parse_mode="HTML")

        if e.demojize(m.text) == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏":
            db = sqlite3.connect(DATABASE_NAME)
            db.row_factory = sqlite3.Row
            c = db.execute(f"SELECT * FROM userss where username <> '@None'")
            log = c.fetchall()
            c.close()
            db.close()
            BotChecking = TeleBot(BOTAPIKEY)
            countSended = 0
            countBlocked = 0
            for i in log:
                try:
                    countSended += 1

                    Butt_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    Butt_main.add(types.KeyboardButton(e.emojize(f"–ü—Ä–æ–¥–ª–∏—Ç—å :money_bag:")),
                                  types.KeyboardButton(e.emojize(f"–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å :gear:")))
                    BotChecking.send_message(i['tgid'],
                                             texts_for_bot["alert_to_update"],
                                             reply_markup=Butt_main, parse_mode="HTML")
                except:
                    countSended -= 1
                    countBlocked += 1
                    pass

            BotChecking.send_message(CONFIG['admin_tg_id'],
                                     f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {countSended} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. {countBlocked} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–æ –±–æ—Ç–∞",
                                     parse_mode="HTML")

        if e.demojize(m.text) == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π":
            allusers = await user_dat.GetAllUsersWithSub()
            readymass = []
            readymes = ""

            if len(allusers) == 0:
                await bot.send_message(m.from_user.id, e.emojize("–ù–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π!"),
                                       reply_markup=await buttons.admin_buttons(), parse_mode="HTML")
                return

            for i in allusers:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –∏ –∑–∞–¥–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                subscription_time = int(i['subscription']) if i['subscription'] is not None else 0
                fullname = i['fullname'] if i['fullname'] is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                username = i['username'] if i['username'] is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                tgid = i['tgid'] if i['tgid'] is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
                formatted_date = datetime.utcfromtimestamp(subscription_time + CONFIG['UTC_time'] * 3600).strftime(
                    '%d.%m.%Y %H:%M')

                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                raw = f"{fullname} ({username}|<code>{tgid}</code>) - {formatted_date}\n\n"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                if len(readymes) + len(raw) > 4090:
                    readymass.append(readymes)
                    readymes = ""
                readymes += raw

            readymass.append(readymes)
            for msg in readymass:
                await bot.send_message(m.from_user.id, e.emojize(msg), parse_mode="HTML")

        if e.demojize(m.text) == "–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
            db = await aiosqlite.connect(DATABASE_NAME)
            c = await db.execute(f"select * from static_profiles")
            all_staticusers = await c.fetchall()
            await c.close()
            await db.close()
            if len(all_staticusers) == 0:
                await bot.send_message(m.from_user.id, "–°—Ç–∞—Ç–∏—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç—É!")
                return
            for i in all_staticusers:
                Butt_delete_account = types.InlineKeyboardMarkup()
                Butt_delete_account.add(types.InlineKeyboardButton(e.emojize("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è :cross_mark:"),
                                                                   callback_data=f'DELETE:{str(i[0])}'))

                config = open(f'/root/wg0-client-{str(str(i[1]))}.conf', 'rb')
                await bot.send_document(chat_id=m.chat.id, document=config,
                                        visible_file_name=f"{str(str(i[1]))}.conf",
                                        caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{str(i[1])}</code>", parse_mode="HTML",
                                        reply_markup=Butt_delete_account)

            return

        if e.demojize(m.text) == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id :pencil:":
            await bot.send_message(m.from_user.id, "–í–≤–µ–¥–∏—Ç–µ Telegram Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                                   reply_markup=types.ReplyKeyboardRemove())
            await bot.set_state(m.from_user.id, MyStates.findUserViaId)
            return

        if e.demojize(m.text) == "–°—Ç–∞—Ç–∏—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            await bot.send_message(m.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
                                   reply_markup=await buttons.admin_buttons_static_users())
            return

        if e.demojize(m.text) == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è :plus:":
            await bot.send_message(m.from_user.id,
                                   "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –∞—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã.",
                                   reply_markup=await buttons.admin_buttons_back())
            await bot.set_state(m.from_user.id, MyStates.AdminNewUser)
            return

    if e.demojize(m.text) == "–ü—Ä–æ–¥–ª–∏—Ç—å :money_bag:":
        payment_info = await user_dat.PaymentInfo()

        # if not payment_info is None:
        #     urltopay=CONFIG["url_redirect_to_pay"]+str((await p2p.check(bill_id=payment_info['bill_id'])).pay_url)[-36:]
        #     Butt_payment = types.InlineKeyboardMarkup()
        #     Butt_payment.add(
        #         types.InlineKeyboardButton(e.emojize("–û–ø–ª–∞—Ç–∏—Ç—å :money_bag:"), url=urltopay))
        #     Butt_payment.add(
        #         types.InlineKeyboardButton(e.emojize("–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ :cross_mark:"), callback_data=f'Cancel:'+str(user_dat.tgid)))
        #     await bot.send_message(m.chat.id,"–û–ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–æ—à–ª—ã–π —Å—á–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ!",reply_markup=Butt_payment)
        # else:
        if True:
            Butt_payment = types.InlineKeyboardMarkup()
            Butt_payment.add(
                types.InlineKeyboardButton(e.emojize(f"1 –º–µ—Å. üìÖ - {int(getCostBySale(1))} —Ä—É–±."),
                                           callback_data="BuyMonth:1"))
            Butt_payment.add(
                types.InlineKeyboardButton(e.emojize(f"3 –º–µ—Å. üìÖ - {int(getCostBySale(3))} —Ä—É–±. (-5% –•–ò–¢)"),
                                           callback_data="BuyMonth:3"))
            Butt_payment.add(
                types.InlineKeyboardButton(e.emojize(f"6 –º–µ—Å. üìÖ - {int(getCostBySale(6))} —Ä—É–±. (-10%)"),
                                           callback_data="BuyMonth:6"))
            Butt_payment.add(
                types.InlineKeyboardButton(e.emojize(f"12 –º–µ—Å. üìÖ - {int(getCostBySale(12))} —Ä—É–±. (-15%)"),
                                           callback_data="BuyMonth:12"))
            Butt_payment.add(
                types.InlineKeyboardButton(
                    e.emojize(f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ +1 –Ω–µ–¥–µ–ª—è –∑–∞ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞"),
                    callback_data="Referrer"))

            # await bot.send_message(m.chat.id, "<b>–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ Qiwi –∫–æ—à–µ–ª—å–∫–∞!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=Butt_payment,parse_mode="HTML")
            await bot.send_message(m.chat.id,
                                   "<b>–û–ø–ª–∞—á–∏–≤–∞–µ–π—Ç–µ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º –≤–∞–º —Å–ø–æ—Å–æ–±–æ–º!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VPN:",
                                   reply_markup=Butt_payment, parse_mode="HTML")

    if e.demojize(m.text) == "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å :gear:":
        if user_dat.trial_subscription == False:
            Butt_how_to = types.InlineKeyboardMarkup()
            Butt_how_to.add(
                types.InlineKeyboardButton(e.emojize("–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), callback_data="Tutorial"))

            config = open(f'/root/wg0-client-{str(user_dat.tgid)}.conf', 'rb')
            await bot.send_document(chat_id=m.chat.id, document=config, visible_file_name=f"{str(user_dat.tgid)}.conf",
                                    caption=texts_for_bot["how_to_connect_info"], parse_mode="HTML",
                                    reply_markup=Butt_how_to)
        else:
            await bot.send_message(chat_id=m.chat.id, text="–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!")

    if e.demojize(m.text) == "–†–µ—Ñ–µ—Ä–∞–ª—ã :busts_in_silhouette:":
        countReferal = await user_dat.countReferrerByUser()
        refLink = "https://t.me/StudyVpnBot?start=" + str(user_dat.tgid)

        msg = f"<b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +1 –Ω–µ–¥–µ–ª—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞</b>\n\r\n\r" \
              f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {str(countReferal)} " \
              f"\n\r–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n\r<code>{refLink}</code>"

        await bot.send_message(chat_id=m.chat.id, text=msg, parse_mode='HTML')


@bot.callback_query_handler(func=lambda c: 'Referrer' in c.data)
async def Referrer(call: types.CallbackQuery):
    user_dat = await User.GetInfo(call.from_user.id)
    countReferal = await user_dat.countReferrerByUser()
    refLink = "https://t.me/StudyVpnBot?start=" + str(user_dat.tgid)

    msg = f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ +1 –Ω–µ–¥–µ–ª—é –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞\n\r\n\r" \
          f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {str(countReferal)} " \
          f"\n\r–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n\r<code>{refLink}</code>"

    await bot.send_message(chat_id=call.message.chat.id, text=msg, parse_mode='HTML')


@bot.callback_query_handler(func=lambda c: 'Tutorial' in c.data)
async def Tutorial(call: types.CallbackQuery):
    msg = "https://youtube.com/shorts/n-oxWNzDmqQ?feature=share"
    await bot.send_message(chat_id=call.message.chat.id, text=msg, parse_mode='HTML')


@bot.callback_query_handler(func=lambda c: 'BuyMonth:' in c.data)
async def Buy_month(call: types.CallbackQuery):
    user_dat = await User.GetInfo(call.from_user.id)
    chat_id = call.message.chat.id
    Month_count = int(str(call.data).split(":")[1])
    price = 1 if user_dat.tgid == CONFIG["admin_tg_id"] else getCostBySale(Month_count)

    await bot.delete_message(chat_id, call.message.id)
    plans = {
        "count_month": Month_count,
        "price": price,
        "month_count": Month_count,
    }
    payment_url, payment_id = create(plans, chat_id, user_dat.tgid)

    keyboard = [
        [
            types.InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', url=payment_url),
            types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f"CheckPurchase:{payment_id}"),
        ],
    ]
    reply_markup = types.InlineKeyboardMarkup(keyboard)
    await bot.send_message(chat_id, text="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É üí∏", reply_markup=reply_markup)

@bot.callback_query_handler(func=lambda c: 'CheckPurchase:' in c.data)
async def check_handler(call: types.CallbackQuery) -> None:
    payment_id = str(call.data).split(":")[1]
    payment_status, payment_metadata = check(payment_id)
    if payment_status:
        if await payment_already_checked(payment_id):
            ## –ü–æ–≤—Ç–æ—Ä–Ω–æ –ù–ï —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–ø–æ–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await bot.send_message(call.from_user.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
        else:
            ## –§–∏–∫—Å–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –ø–æ–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await got_payment(call, payment_metadata)
    else:
        await bot.send_message(call.from_user.id, f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã. –û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ https://t.me/StudyVpnRu")

# @bot.callback_query_handler(func=lambda c: 'Cancel:' in c.data)
# async def Cancel_payment(call: types.CallbackQuery):
#     user_dat = await User.GetInfo(call.from_user.id)
#     payment_info = await user_dat.PaymentInfo()
#     if not payment_info is None:
#         await user_dat.CancelPayment()
#         await p2p.reject(bill_id=payment_info['bill_id'])
#         await bot.edit_message_text(chat_id=call.from_user.id,message_id=call.message.id,text="–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω!",reply_markup=None)
#
#
#     await bot.answer_callback_query(call.id)


async def AddTimeToUser(tgid, timetoadd):
    userdat = await User.GetInfo(tgid)
    db = await aiosqlite.connect(DATABASE_NAME)
    db.row_factory = sqlite3.Row

    if int(userdat.subscription) < int(time.time()):
        passdat = int(time.time()) + timetoadd
        await db.execute(f"UPDATE userss SET subscription = ?, banned = false, notion_oneday = false WHERE tgid = ?",
                         (passdat, tgid))
        subprocess.call(f'./addusertovpn.sh {str(tgid)}', shell=True)
        await bot.send_message(tgid, "–í–∞—à –¥–æ—Å—Ç—É–ø –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=await main_buttons(userdat,wasUpdate=True))
    else:
        passdat = int(userdat.subscription) + timetoadd
        await db.execute(f"UPDATE userss SET subscription = ?, notion_oneday = false WHERE tgid = ?",
                         (passdat, tgid))
        await bot.send_message(tgid, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!", reply_markup=await main_buttons(await User.GetInfo(tgid), wasUpdate=True))

    await db.commit()
    await db.close()

    ## todo: set updste info about actual time of subsription


@bot.callback_query_handler(func=lambda c: 'DELETE:' in c.data or 'DELETYES:' in c.data or 'DELETNO:' in c.data)
async def DeleteUserYesOrNo(call: types.CallbackQuery):
    idstatic = str(call.data).split(":")[1]
    db = await aiosqlite.connect(DATABASE_NAME)
    c = await db.execute(f"select * from static_profiles where id=?", (int(idstatic),))
    staticuser = await c.fetchone()
    await c.close()
    await db.close()
    if staticuser[0] != int(idstatic):
        await bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–¥–∞–ª–µ–Ω!")
        return

    if "DELETE:" in call.data:
        Butt_delete_account = types.InlineKeyboardMarkup()
        Butt_delete_account.add(
            types.InlineKeyboardButton(e.emojize("–£–¥–∞–ª–∏—Ç—å!"), callback_data=f'DELETYES:{str(staticuser[0])}'),
            types.InlineKeyboardButton(e.emojize("–ù–µ—Ç"), callback_data=f'DELETNO:{str(staticuser[0])}'))
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=Butt_delete_account)
        await bot.answer_callback_query(call.id)
        return
    if "DELETYES:" in call.data:
        db = await aiosqlite.connect(DATABASE_NAME)
        await db.execute(f"delete from static_profiles where id=?", (int(idstatic),))
        await db.commit()
        await bot.delete_message(call.message.chat.id, call.message.id)
        subprocess.call(f'./deleteuserfromvpn.sh {str(staticuser[1])}', shell=True)
        await bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
        return
    if "DELETNO:" in call.data:
        Butt_delete_account = types.InlineKeyboardMarkup()
        Butt_delete_account.add(types.InlineKeyboardButton(e.emojize("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è :cross_mark:"),
                                                           callback_data=f'DELETE:{str(idstatic)}'))
        await bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=Butt_delete_account)
        await bot.answer_callback_query(call.id)
        return


@bot.pre_checkout_query_handler(func=lambda query: True)
async def checkout(pre_checkout_query):
    print(pre_checkout_query.total_amount)
    month = int(str(pre_checkout_query.invoice_payload).split(":")[1])
    if getCostBySale(month) * 100 != pre_checkout_query.total_amount:
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False,
                                            error_message="–ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å –ø–æ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω–µ!")
        await bot.send_message(pre_checkout_query.from_user.id,
                               "<b>–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å! –ù–µ–ª—å–∑—è –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω–µ!</b>", parse_mode="HTML")
    else:
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                            error_message="–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")


def getCostBySale(month):
    cost = month * CONFIG['one_month_cost']
    if month == 3:
        saleAsPersent = 5
    elif month == 6:
        saleAsPersent = 10
    elif month == 12:
        saleAsPersent = 15
    else:
        return int(cost)
    return int(cost - (cost * saleAsPersent / 100))


async def got_payment(m, payment_metadata):
    month = int(payment_metadata.get("month_count"))
    user = await User.GetInfo(m.from_user.id)
    payment_id = str(m.data).split(":")[1]

    addTimeSubscribe = month * 30 * 24 * 60 * 60
    await user.NewPay(payment_id, getCostBySale(month), addTimeSubscribe, m.from_user.id)
    await AddTimeToUser(m.from_user.id, addTimeSubscribe)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä
    if user.referrer_id:
        referrer_user = await User.GetInfo(user.referrer_id)
        if referrer_user and referrer_user.registered:
            # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä—É 7 –¥–Ω–µ–π –∑–∞ –æ–ø–ª–∞—Ç—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
            await AddTimeToUser(referrer_user.tgid, 7 * 86400)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –±–æ–Ω—É—Å–µ
            await bot.send_message(
                referrer_user.tgid,
                "üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 7 –¥–Ω–µ–π –∑–∞ –æ–ø–ª–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!",
                reply_markup=await main_buttons(referrer_user,wasUpdate=True)
            )

    await bot.send_message(
        m.from_user.id,
        texts_for_bot["success_pay_message"],
        reply_markup=await main_buttons(user, wasUpdate=True),
        parse_mode="HTML"
    )


bot.add_custom_filter(asyncio_filters.StateFilter(bot))


# def checkPayments():
#     while True:
#         try:
#             time.sleep(5)
#             db = sqlite3.connect(DATABASE_NAME)
#             db.row_factory = sqlite3.Row
#             c = db.execute(f"SELECT * FROM payments")
#             log = c.fetchall()
#             c.close()
#             db.close()
#
#             if len(log)>0:
#                 p2pCheck = QiwiP2P(auth_key=QIWI_PRIV_KEY)
#                 for i in log:
#                     status = p2pCheck.check(bill_id=i["bill_id"]).status
#                     if status=="PAID":
#                         BotChecking = TeleBot(BOTAPIKEY)
#
#                         db = sqlite3.connect(DATABASE_NAME)
#                         db.execute(f"DELETE FROM payments where tgid=?",
#                                    (i['tgid'],))
#                         userdat=db.execute(f"SELECT * FROM userss WHERE tgid=?",(i['tgid'],)).fetchone()
#                         if int(userdat[2])<int(time.time()):
#                             passdat=int(time.time())+i["time_to_add"]
#                             db.execute(f"UPDATE userss SET subscription = ?, banned=false, notion_oneday=false where tgid=?",(str(int(time.time())+i["time_to_add"]),i['tgid']))
#                             #check = subprocess.call(f'./addusertovpn.sh {str(i["tgid"])}', shell=True)
#                             BotChecking.send_message(i['tgid'],e.emojize('–î–∞–Ω–Ω—ã –¥–ª—è –≤—Ö–æ–¥–∞ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, —Å–∫–∞—á–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å :gear:"'))
#                         else:
#                             passdat = int(userdat[2]) + i["time_to_add"]
#                             db.execute(f"UPDATE userss SET subscription = ?, notion_oneday=false where tgid=?",
#                                        (str(int(userdat[2])+i["time_to_add"]), i['tgid']))
#                         db.commit()
#
#
#                         Butt_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
#                         dateto = datetime.utcfromtimestamp(int(passdat) +CONFIG['UTC_time']*3600).strftime('%d.%m.%Y %H:%M')
#                         timenow = int(time.time())
#                         if int(passdat) >= timenow:
#                             Butt_main.add(
#                                 types.KeyboardButton(e.emojize(f":green_circle: –î–æ: {dateto} –ú–°–ö:green_circle:")))
#
#                         Butt_main.add(types.KeyboardButton(e.emojize(f"–ü—Ä–æ–¥–ª–∏—Ç—å :money_bag:")),
#                                       types.KeyboardButton(e.emojize(f"–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å :gear:")))
#
#                         BotChecking.edit_message_reply_markup(chat_id=i['tgid'],message_id=i['mesid'],reply_markup=None)
#                         BotChecking.send_message(i['tgid'],
#                                                  texts_for_bot["success_pay_message"],
#                                                  reply_markup=Butt_main)
#
#
#                     if status == "EXPIRED":
#                         BotChecking = TeleBot(BOTAPIKEY)
#                         BotChecking.edit_message_text(chat_id=i['tgid'], message_id=i['mesid'],text="–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.",
#                                                               reply_markup=None)
#                         db = sqlite3.connect(DATABASE_NAME)
#                         db.execute(f"DELETE FROM payments where tgid=?",
#                                    (i['tgid'],))
#                         db.commit()
#
#
#
#
#         except:
#             pass


def checkTime():
    while True:
        try:
            time.sleep(60 * 10)
            db = sqlite3.connect(DATABASE_NAME)
            db.row_factory = sqlite3.Row
            c = db.execute("SELECT * FROM userss")
            log = c.fetchall()
            c.close()
            db.close()
            BotChecking = TeleBot(BOTAPIKEY)

            for i in log:
                time_now = int(time.time())
                remained_time = int(i['subscription']) - time_now

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–µ–∫—à—É—é –ø–æ–¥–ø–∏—Å–∫—É
                if remained_time <= 0 and not i['banned']:
                    db = sqlite3.connect(DATABASE_NAME)
                    db.execute("UPDATE userss SET banned=true WHERE tgid=?", (i['tgid'],))
                    db.commit()
                    db.close()
                    subprocess.call(f'./deleteuserfromvpn.sh {str(i["tgid"])}', shell=True)

                    dateto = datetime.utcfromtimestamp(int(i['subscription']) + CONFIG['UTC_time'] * 3600).strftime(
                        '%d.%m.%Y %H:%M')
                    Butt_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    Butt_main.add(
                        types.KeyboardButton(e.emojize(f":red_circle: –ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å: {dateto} –ú–°–ö:red_circle:")))
                    Butt_main.add(types.KeyboardButton(e.emojize(f"–ü—Ä–æ–¥–ª–∏—Ç—å :money_bag:")),
                                  types.KeyboardButton(e.emojize(f"–†–µ—Ñ–µ—Ä–∞–ª—ã :busts_in_silhouette:")),
                                  types.KeyboardButton(e.emojize(f"–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å :gear:")))

                    BotChecking.send_message(i['tgid'],
                                             texts_for_bot["ended_sub_message"],
                                             reply_markup=Butt_main, parse_mode="HTML")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                if 0 < remained_time <= 3 * 86400 and not i['notified_about_expiry']:
                    db = sqlite3.connect(DATABASE_NAME)
                    db.execute("UPDATE userss SET notified_about_expiry=true WHERE tgid=?", (i['tgid'],))
                    db.commit()
                    db.close()

                    Butt_refer = types.InlineKeyboardMarkup()
                    Butt_refer.add(types.InlineKeyboardButton(e.emojize(f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ  –Ω–µ–¥–µ–ª—è –∑–∞ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞"),
                                                              callback_data="Referrer"))

                    BotChecking.send_message(i['tgid'],
                                             "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏.",
                                             reply_markup=Butt_refer,
                                             parse_mode="HTML")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                if remained_time <= 86400 and not i['notion_oneday']:
                    db = sqlite3.connect(DATABASE_NAME)
                    db.execute("UPDATE userss SET notion_oneday=true WHERE tgid=?", (i['tgid'],))
                    db.commit()

                    Butt_refer = types.InlineKeyboardMarkup()
                    Butt_refer.add(types.InlineKeyboardButton(e.emojize(f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ  –Ω–µ–¥–µ–ª—è –∑–∞ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞"),
                                                              callback_data="Referrer"))

                    BotChecking.send_message(i['tgid'],
                                             texts_for_bot["alert_to_renew_sub"],
                                             reply_markup=Butt_refer,
                                             parse_mode="HTML")

                # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                approveLTV = 60 * 60 * 24 * int(CONFIG['trial_period'])
                expire_time = time_now - int(i['subscription'])

                if expire_time >= approveLTV and not i['trial_continue']:
                    timetoadd = approveLTV
                    newExpireEnd = int(time.time() + timetoadd)
                    db = sqlite3.connect(DATABASE_NAME)
                    db.execute("UPDATE userss SET trial_continue=1 WHERE tgid=?", (i['tgid'],))
                    db.execute("UPDATE userss SET subscription=?, banned=false, notion_oneday=false WHERE tgid=?",
                               (newExpireEnd, i['tgid']))
                    db.commit()
                    db.close()

                    subprocess.call(f'./addusertovpn.sh {str(i["tgid"])}', shell=True)
                    dateto = datetime.utcfromtimestamp(newExpireEnd + CONFIG['UTC_time'] * 3600).strftime(
                        '%d.%m.%Y %H:%M')

                    Butt_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    Butt_main.add(types.KeyboardButton(e.emojize(f":green_circle: –î–æ: {dateto} –ú–°–ö:green_circle:")),
                                  types.KeyboardButton(e.emojize(f"–ü—Ä–æ–¥–ª–∏—Ç—å :money_bag:")),
                                  types.KeyboardButton(e.emojize(f"–†–µ—Ñ–µ—Ä–∞–ª—ã :busts_in_silhouette:")),
                                  types.KeyboardButton(e.emojize(f"–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å :gear:")))

                    BotChecking.send_message(i['tgid'],
                                             e.emojize(texts_for_bot["alert_to_extend_sub"]),
                                             reply_markup=Butt_main, parse_mode="HTML")

        except Exception as err:
            print(f"–û—à–∏–±–∫–∞: {err}")
            pass




@bot.message_handler(commands=['stats'])
async def show_stats(m: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if m.chat.id != CONFIG['admin_tg_id']:
        return

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    async with aiosqlite.connect(DATABASE_NAME) as db:
        # –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (—Ç–µ—Ö, —É –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞)
        active_users_query = await db.execute("SELECT COUNT(*) FROM userss WHERE subscription > ?", (int(time.time()),))
        active_count = await active_users_query.fetchone()

        # –ü–æ–¥—Å—á—ë—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users_query = await db.execute("SELECT COUNT(*) FROM userss")
        total_count = await total_users_query.fetchone()

        # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞
        total_income_query = await db.execute("SELECT SUM(amount) FROM payments")
        total_income = await total_income_query.fetchone()

        # –ü–æ–¥—Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Ö—Å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        new_users_query = await db.execute("SELECT COUNT(*) FROM userss WHERE created_at >= datetime('now', '-30 days')")
        new_users_count = await new_users_query.fetchone()

        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        new_users_day_query = await db.execute("SELECT COUNT(*) FROM userss WHERE created_at >= datetime('now', '-1 day')")
        new_users_day_count = await new_users_day_query.fetchone()

        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        new_users_week_query = await db.execute("SELECT COUNT(*) FROM userss WHERE created_at >= datetime('now', '-7 days')")
        new_users_week_count = await new_users_week_query.fetchone()

        # –ü–æ–¥—Å—á—ë—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        banned_users_query = await db.execute("SELECT COUNT(*) FROM userss WHERE banned = 1")
        banned_count = await banned_users_query.fetchone()

        # –ü–æ–¥—Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
        users_with_referrals_query = await db.execute("SELECT COUNT(*) FROM userss WHERE referrer_id IS NOT NULL")
        referrals_count = await users_with_referrals_query.fetchone()

        # –ü–æ–¥—Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
        trial_users_query = await db.execute("SELECT COUNT(*) FROM userss WHERE trial_continue = 1")
        trial_count = await trial_users_query.fetchone()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count[0]}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {active_count[0]}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {banned_count[0]}\n"
        f"üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: {referrals_count[0]}\n"
        f"üÜì –ù–∞ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ: {trial_count[0]}\n"
        f"üìà –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å: {new_users_day_count[0]}\n"
        f"üìà –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 7 –¥–Ω–µ–π: {new_users_week_count[0]}\n"
        f"üìÜ –ù–æ–≤—ã–µ –∑–∞ 30 –¥–Ω–µ–π: {new_users_count[0]}\n"
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income[0] if total_income[0] else 0} RUB\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    await bot.send_message(m.chat.id, stats_message, parse_mode="HTML")


async def check_subscription_expiry():
    while True:
        async with aiosqlite.connect(DATABASE_NAME) as db:
            c = await db.execute("SELECT * FROM userss WHERE subscription > 0")
            users = await c.fetchall()
            for user in users:
                remaining_time = int(user['subscription']) - int(time.time())
                if 0 < remaining_time <= 3 * 86400:
                    await bot.send_message(
                        user['tgid'],
                        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë.",
                        reply_markup=await main_buttons(user,wasUpdate=True)
                    )
            await asyncio.sleep(86400)  # –ó–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def backup_database():
    while True:
        shutil.copy(DATABASE_NAME, f"backup_{int(time.time())}.sqlite")
        await asyncio.sleep(86400)  # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def log_user_activity(tgid):
    db = await aiosqlite.connect(DATABASE_NAME)
    await db.execute("INSERT INTO user_activity (tgid, last_access, usage_count) VALUES (?, CURRENT_TIMESTAMP, 1) ON CONFLICT(tgid) DO UPDATE SET last_access = CURRENT_TIMESTAMP, usage_count = usage_count + 1", (tgid,))
    await db.commit()
    await db.close()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
async def main():
    # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await initialize_database()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    # –ó–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.create_task(backup_database())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.polling(non_stop=True, interval=0, request_timeout=60)

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
if __name__ == '__main__':
    from main import bot
    asyncio.run(main())
